'use client';
import React from 'react';
import { usePlanStore } from '../store/planStore';
import { snap } from '@planner/geometry';

const GRID_MM = 100; // —à–∞–≥ —Å–µ—Ç–∫–∏ –¥–ª—è ¬´–ø—Ä–∏–ª–∏–ø–∞–Ω–∏—è¬ª –∑–Ω–∞—á–µ–Ω–∏–π
const WORKPLACE_SIZE = { W: 1400, H: 800 };
const DEFAULT_TASK_COUNT = 12;

export const RoomPanel: React.FC = () => {
  const { plan, updateRoom, updateTask, clearWorkplaces } = usePlanStore();
  const [W, setW] = React.useState<number>(plan.room.W);
  const [H, setH] = React.useState<number>(plan.room.H);
  const [taskCount, setTaskCount] = React.useState<number>(plan.task?.count ?? DEFAULT_TASK_COUNT);

  // –¥–µ—Ä–∂–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –ø—Ä–∏ –≤–Ω–µ—à–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
  React.useEffect(() => {
    setW(plan.room.W);
    setH(plan.room.H);
  }, [plan.room.W, plan.room.H]);

  React.useEffect(() => {
    setTaskCount(plan.task?.count ?? DEFAULT_TASK_COUNT);
  }, [plan.task?.count]);

  const applyW = (value: number) => {
    const v = Math.max(1000, Math.min(200000, snap(Math.round(value), GRID_MM)));
    setW(v);
    updateRoom({ W: v });
  };

  const applyH = (value: number) => {
    const v = Math.max(1000, Math.min(200000, snap(Math.round(value), GRID_MM)));
    setH(v);
    updateRoom({ H: v });
  };

  const applyTaskCount = (count: number) => {
    const validated = Math.max(1, Math.min(100, Math.round(count)));
    setTaskCount(validated);
    updateTask({ count: validated, size: WORKPLACE_SIZE });
  };

  const currentWorkplaces = plan.objects.filter(o => o.type === 'workplace').length;

  const clearSolution = () => {
    if (currentWorkplaces === 0) return;

    const confirmed = window.confirm(
      `–£–¥–∞–ª–∏—Ç—å ${currentWorkplaces} —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç —Å –ø–ª–∞–Ω–∞?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`
    );

    if (!confirmed) return;

    clearWorkplaces();
  };

  const areaM2 = (W * H) / 1_000_000;
  const ratio = H === 0 ? 0 : W / H;
  const taskSize = plan.task?.size ?? WORKPLACE_SIZE;

  return (
    <div style={{ display: 'flex', flexDirection: 'column', gap: 12, height: '100%' }}>
      <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 12 }}>
        <label style={{ display: 'flex', flexDirection: 'column', gap: 6 }}>
          <span style={{ fontSize: 12, color: '#6b7280' }}>–®–∏—Ä–∏–Ω–∞ (–º–º)</span>
          <input
            type="number"
            value={W}
            step={GRID_MM}
            min={1000}
            max={200000}
            onChange={(e) => setW(Number(e.target.value))}
            onBlur={() => applyW(W)}
            onKeyDown={(e) => { if (e.key === 'Enter') applyW(W); }}
            style={{ padding: '6px 8px', border: '1px solid #ddd', borderRadius: 6 }}
          />
        </label>
        <label style={{ display: 'flex', flexDirection: 'column', gap: 6 }}>
          <span style={{ fontSize: 12, color: '#6b7280' }}>–í—ã—Å–æ—Ç–∞ (–º–º)</span>
          <input
            type="number"
            value={H}
            step={GRID_MM}
            min={1000}
            max={200000}
            onChange={(e) => setH(Number(e.target.value))}
            onBlur={() => applyH(H)}
            onKeyDown={(e) => { if (e.key === 'Enter') applyH(H); }}
            style={{ padding: '6px 8px', border: '1px solid #ddd', borderRadius: 6 }}
          />
        </label>
      </div>

      <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 12, fontSize: 12 }}>
        <div>
          <div style={{ color: '#6b7280' }}>–ü–ª–æ—â–∞–¥—å</div>
          <div><b>{areaM2.toFixed(2)}</b> –º¬≤</div>
        </div>
        <div>
          <div style={{ color: '#6b7280' }}>–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω</div>
          <div><b>{ratio.toFixed(3)}</b></div>
        </div>
      </div>

      <div style={{
        marginTop: 24,
        paddingTop: 16,
        borderTop: '1px solid #e5e7eb'
      }}>
        <h3 style={{
          fontSize: 14,
          fontWeight: 600,
          marginBottom: 12,
          color: '#111827'
        }}>
          –ó–∞–¥–∞—á–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        </h3>

        <label style={{ display: 'flex', flexDirection: 'column', gap: 6 }}>
          <span style={{ fontSize: 12, color: '#6b7280' }}>
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç
          </span>
          <input
            type="number"
            min={1}
            max={100}
            step={1}
            value={taskCount}
            onChange={(e) => setTaskCount(Number(e.target.value))}
            onBlur={() => applyTaskCount(taskCount)}
            onKeyDown={(e) => { if (e.key === 'Enter') applyTaskCount(taskCount); }}
            style={{
              padding: '6px 8px',
              border: '1px solid #ddd',
              borderRadius: 6
            }}
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 12"
          />
        </label>

        <div style={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          padding: '8px 12px',
          background: '#f9fafb',
          borderRadius: 6,
          fontSize: 13,
          marginTop: 12
        }}>
          <span style={{ color: '#6b7280' }}>–†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ –†–ú:</span>
          <strong>{taskSize.W} √ó {taskSize.H} –º–º</strong>
        </div>

        <div style={{
          marginTop: 12,
          padding: 12,
          background: '#f9fafb',
          borderRadius: 8,
          fontSize: 13
        }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 6 }}>
            <span style={{ color: '#6b7280' }}>–†–∞–∑–º–µ—â–µ–Ω–æ –Ω–∞ –ø–ª–∞–Ω–µ:</span>
            <strong>{currentWorkplaces} –†–ú</strong>
          </div>

          {plan.task && (
            <div style={{ display: 'flex', justifyContent: 'space-between' }}>
              <span style={{ color: '#6b7280' }}>–ó–∞–¥–∞–Ω–æ –¥–ª—è —Ä–µ—à–∞—Ç–µ–ª—è:</span>
              <strong>{plan.task.count} –†–ú</strong>
            </div>
          )}

          {plan.task && currentWorkplaces !== plan.task.count && (
            <div style={{
              marginTop: 8,
              padding: 8,
              background: '#fef3c7',
              borderRadius: 6,
              fontSize: 12,
              color: '#92400e'
            }}>
              ‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –ø–ª–∞–Ω–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º
            </div>
          )}
        </div>

        <button
          onClick={clearSolution}
          disabled={currentWorkplaces === 0}
          style={{
            marginTop: 12,
            width: '100%',
            padding: '8px 12px',
            fontSize: 13,
            fontWeight: 500,
            borderRadius: 8,
            border: 'none',
            background: currentWorkplaces > 0 ? '#ef4444' : '#e5e7eb',
            color: currentWorkplaces > 0 ? '#fff' : '#9ca3af',
            cursor: currentWorkplaces > 0 ? 'pointer' : 'not-allowed',
            transition: 'all 0.2s'
          }}
          title={currentWorkplaces > 0 ? '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞ —Å –ø–ª–∞–Ω–∞' : '–ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è'}
        >
          üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ ({currentWorkplaces} –†–ú)
        </button>
      </div>

      <div style={{ fontSize: 12, color: '#6b7280', marginTop: 'auto' }}>
        –ó–Ω–∞—á–µ–Ω–∏—è ¬´–ø—Ä–∏–ª–∏–ø–∞—é—Ç¬ª –∫ —à–∞–≥—É <b>{GRID_MM} –º–º</b>. –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–∑–æ—Ä–∞ –Ω–∞–∂–º–∏ –∫–ª–∞–≤–∏—à—É <b>F</b> ‚Äî ¬´–ø–æ–¥–æ–≥–Ω–∞—Ç—å –∫ —ç–∫—Ä–∞–Ω—É¬ª.
      </div>
    </div>
  );
};
